$mq-xsmall-width: 30em;
$mq-small-width: 48em;
$mq-medium-width: 64em;
$mq-large-width: 75em;
$base-font-size: 16;

@function em($pixels, $context: $base-font-size) {
  @return ($pixels / $context) * 1em;
}

@function rem($pixels, $context: $base-font-size) {
  @return ($pixels / $context) * 1rem;
}

@mixin xsmall-and-up {
  @media only screen and (min-width: #{$mq-xsmall-width}) {
    @content;
  }
}

@mixin xsmall-only {
  @media (min-width: #{$mq-xsmall-width}) and (max-width: #{$mq-small-width - 1em}) {
    @content;
  }
}

@mixin small-and-up {
  @media only screen and (min-width: #{$mq-small-width}) {
    @content;
  }
}

@mixin small-only {
  @media (min-width: #{$mq-small-width}) and (max-width: #{$mq-medium-width - 1em}) {
    @content;
  }
}

@mixin medium-and-up {
  @media only screen and (min-width: #{$mq-medium-width}) {
    @content;
  }
}

@mixin medium-only {
  @media (min-width: #{$mq-medium-width}) and (max-width: #{$mq-large-width - 1em}) {
    @content;
  }
}

@mixin xsmall-up-to-large {
  @media (min-width: #{$mq-xsmall-width}) and (max-width: #{$mq-large-width - 1em}) {
    @content;
  }
}

@mixin large-and-up {
  @media only screen and (min-width: #{$mq-large-width}) {
    @content;
  }
}

//Responsive Images/Videos
@mixin aspect-ratio($width, $height) {
  position: relative;
  display: block;
  background-color: $base-black;

  &:before {
    content: "";
    display: block;
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content {
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
  }
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

@mixin arrow($direction, $size, $color) {
  content: ""; // ensures the arrows are visible
  
  // ensures the size of the arrows is correct:
  width: 0;
  height: 0;

  // Lists for positions/directions
  $directions: ('down', 'left', 'up', 'right');
  $positions: ('top', 'right', 'bottom', 'left');

  // Loop through each position
  @each $position in $positions {
    // Calculate the index of the position in the list
    $index: index($positions, $position);

    // If the position matches the direction, render a colored border
    @if nth($directions, $index) == $direction {
      border-#{$position}: $size solid $color;
    } @else {
      border-#{$position}: $size solid transparent;
    }
  }
}